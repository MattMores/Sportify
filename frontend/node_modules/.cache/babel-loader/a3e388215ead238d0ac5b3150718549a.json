{"ast":null,"code":"import { csrfFetch } from \"./csrf\"; // Define Action TYpes as Constants\n\nconst SET_BETS = \"bets/GET_ALL_BETS\";\nconst ADD_BET = \"bets/ADD_BET\";\nconst DELETE_BET = \"bets/DELETE_BET\";\nconst UPDATE_BET = \"bets/UPDATE_BET\"; // Define Action Creators\n\nconst setBets = bets => ({\n  type: SET_BETS,\n  bets // payload\n\n});\n\nconst addBet = bet => ({\n  type: ADD_BET,\n  bet\n});\n\nconst del = betId => ({\n  type: DELETE_BET,\n  betId\n});\n\nconst updateBet = bet => ({\n  type: UPDATE_BET,\n  bet\n}); // Define Thunks\n\n\nexport const getAllBets = () => async dispatch => {\n  const res = await csrfFetch('/api/bets');\n  const bets = await res.json();\n  dispatch(setBets(bets));\n};\nexport const betCreate = bet => async dispatch => {\n  // const { userId, title, content, notebookId } = note; //notebookId\n  const res = await csrfFetch(\"/api/bets\", {\n    method: \"POST\",\n    body: JSON.stringify(bet)\n  });\n\n  if (res.ok) {\n    const bet = await res.json();\n    dispatch(addBet(bet));\n    return res;\n  } // const newNote = await response.json();\n  // console.log(newNote)\n  // dispatch(addNote(newNote));\n  // return response;\n\n};\nexport const deleteBet = id => async dispatch => {\n  await csrfFetch('/api/bets', {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      id\n    })\n  });\n  dispatch(del(id));\n};\nexport const betUpdate = bet => async dispatch => {\n  const res = await csrfFetch('/api/bets', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(bet)\n  });\n\n  if (res.ok) {\n    const updatedBet = await res.json(); // console.log(\"upppppppppp\", updatedBet)\n\n    dispatch(updateBet(updatedBet));\n  }\n}; // Define an initial state\n\nconst initialState = {}; //Define a Reducer\n\nconst betsReducer = (state = initialState, action) => {\n  let newState;\n\n  switch (action.type) {\n    case SET_BETS:\n      // console.log(\"999999999999999\", action.bets)\n      const allBets = {};\n      action.bets.forEach(bet => {\n        allBets[bet.id] = bet;\n      });\n      return { ...state,\n        ...allBets\n      };\n\n    case ADD_BET:\n      {\n        return { ...state,\n          [action.bet.id]: action.bet\n        };\n      }\n\n    case UPDATE_BET:\n      const {\n        bet\n      } = action;\n      newState = { ...state,\n        [bet.id]: bet\n      };\n      return newState;\n\n    case DELETE_BET:\n      console.log(\"ppppppp\", action);\n      newState = { ...state\n      };\n      delete newState[action.betId];\n      return newState;\n\n    default:\n      return state;\n  }\n};\n\nexport default betsReducer;","map":{"version":3,"sources":["/Users/matthewmores/AppAcademy/Capstone/Sportify/frontend/src/store/bets.js"],"names":["csrfFetch","SET_BETS","ADD_BET","DELETE_BET","UPDATE_BET","setBets","bets","type","addBet","bet","del","betId","updateBet","getAllBets","dispatch","res","json","betCreate","method","body","JSON","stringify","ok","deleteBet","id","headers","betUpdate","updatedBet","initialState","betsReducer","state","action","newState","allBets","forEach","console","log"],"mappings":"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","sourcesContent":["import { csrfFetch } from \"./csrf\";\n\n// Define Action TYpes as Constants\nconst SET_BETS = \"bets/GET_ALL_BETS\";\nconst ADD_BET = \"bets/ADD_BET\"\nconst DELETE_BET = \"bets/DELETE_BET\"\nconst UPDATE_BET = \"bets/UPDATE_BET\"\n\n// Define Action Creators\nconst setBets = (bets) => ({\n    type: SET_BETS,\n    bets, // payload\n})\n\nconst addBet = (bet) => ({\n    type: ADD_BET,\n    bet,\n  });\n\nconst del = (betId) => ({\n    type: DELETE_BET,\n    betId,\n});\n\nconst updateBet = (bet) => ({\n    type: UPDATE_BET,\n    bet\n})\n\n// Define Thunks\nexport const getAllBets = () => async (dispatch) => {\n    const res = await csrfFetch('/api/bets');\n    const bets = await res.json();\n    dispatch(setBets(bets));\n}\n\nexport const betCreate = (bet) => async (dispatch) => {\n    // const { userId, title, content, notebookId } = note; //notebookId\n    const res = await csrfFetch(\"/api/bets\", {\n        method: \"POST\",\n        body: JSON.stringify(bet),\n    });\n    if (res.ok) {\n        const bet = await res.json();\n        dispatch(addBet(bet))\n        return res;\n    }\n    // const newNote = await response.json();\n    // console.log(newNote)\n    // dispatch(addNote(newNote));\n    // return response;\n};\n\nexport const deleteBet = (id) => async (dispatch) => {\n    await csrfFetch('/api/bets', {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ id }),\n    });\n\n    dispatch(del(id));\n  };\n\nexport const betUpdate = (bet) => async (dispatch) => {\n    const res = await csrfFetch('/api/bets', {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(bet),\n});\nif (res.ok) {\n    const updatedBet = await res.json();\n    // console.log(\"upppppppppp\", updatedBet)\n    dispatch(updateBet(updatedBet))\n}\n};\n\n// Define an initial state\nconst initialState = {};\n\n//Define a Reducer\nconst betsReducer = (state = initialState, action) => {\n    let newState;\n    switch (action.type) {\n        case SET_BETS:\n            // console.log(\"999999999999999\", action.bets)\n            const allBets = {};\n            action.bets.forEach((bet) => {\n                allBets[bet.id] = bet;\n            })\n            return {\n                ...state,\n                ...allBets,\n            }\n        case ADD_BET: {\n            return {\n                ...state,\n                [action.bet.id]: action.bet,\n              };\n            }\n        case UPDATE_BET:\n            const { bet } = action\n            newState = {...state, [bet.id] : bet}\n            return newState;\n        case DELETE_BET:\n            console.log(\"ppppppp\", action)\n            newState = {...state}\n            delete newState[action.betId]\n            return newState;\n        default:\n            return state;\n    }\n}\n\nexport default betsReducer;\n"]},"metadata":{},"sourceType":"module"}