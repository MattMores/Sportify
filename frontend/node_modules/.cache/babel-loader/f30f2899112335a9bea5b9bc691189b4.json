{"ast":null,"code":"import { csrfFetch } from \"./csrf\"; // Define Action TYpes as Constants\n\nconst SET_BETS = \"bets/GET_ALL_BETS\";\nconst ADD_BET = \"bets/ADD_BET\"; // Define Action Creators\n\nconst setBets = bets => ({\n  type: SET_BETS,\n  bets // payload\n\n});\n\nconst addBet = bet => ({\n  type: ADD_BET,\n  bet\n}); // Define Thunks\n\n\nexport const getAllBets = () => async dispatch => {\n  const res = await csrfFetch('/api/bets');\n  const bets = await res.json();\n  dispatch(setBets(bets));\n};\nexport const noteCreate = note => async dispatch => {\n  console.log(note);\n  const {\n    userId,\n    title,\n    content,\n    notebookId\n  } = note; //notebookId\n\n  const response = await csrfFetch(\"/api/notes/\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      userId,\n      title,\n      content,\n      notebookId\n    })\n  });\n  const newNote = await response.json();\n  console.log(newNote);\n  dispatch(addNote(newNote)); // return response;\n}; // Define an initial state\n\nconst initialState = {}; //Define a Reducer\n\nconst betsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_BETS:\n      const allBets = {};\n      action.bets.forEach(bet => {\n        allBets[bet.id] = bet;\n      });\n      return { ...state,\n        ...allBets\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default betsReducer;","map":{"version":3,"sources":["/Users/matthewmores/AppAcademy/Capstone/Sportify/frontend/src/store/bets.js"],"names":["csrfFetch","SET_BETS","ADD_BET","setBets","bets","type","addBet","bet","getAllBets","dispatch","res","json","noteCreate","note","console","log","userId","title","content","notebookId","response","method","body","JSON","stringify","newNote","addNote","initialState","betsReducer","state","action","allBets","forEach","id"],"mappings":"AAAA,SAASA,SAAT,QAA0B,QAA1B,C,CAEA;;AACA,MAAMC,QAAQ,GAAG,mBAAjB;AACA,MAAMC,OAAO,GAAG,cAAhB,C,CAEA;;AACA,MAAMC,OAAO,GAAIC,IAAD,KAAW;AACvBC,EAAAA,IAAI,EAAEJ,QADiB;AAEvBG,EAAAA,IAFuB,CAEjB;;AAFiB,CAAX,CAAhB;;AAKA,MAAME,MAAM,GAAIC,GAAD,KAAU;AACrBF,EAAAA,IAAI,EAAEH,OADe;AAErBK,EAAAA;AAFqB,CAAV,CAAf,C,CAKA;;;AACA,OAAO,MAAMC,UAAU,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAChD,QAAMC,GAAG,GAAG,MAAMV,SAAS,CAAC,WAAD,CAA3B;AACA,QAAMI,IAAI,GAAG,MAAMM,GAAG,CAACC,IAAJ,EAAnB;AACAF,EAAAA,QAAQ,CAACN,OAAO,CAACC,IAAD,CAAR,CAAR;AACH,CAJM;AAMP,OAAO,MAAMQ,UAAU,GAAIC,IAAD,IAAU,MAAOJ,QAAP,IAAoB;AACpDK,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,QAAM;AAAEG,IAAAA,MAAF;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA,OAAjB;AAA0BC,IAAAA;AAA1B,MAAyCN,IAA/C,CAFoD,CAEC;;AACrD,QAAMO,QAAQ,GAAG,MAAMpB,SAAS,CAAC,aAAD,EAAgB;AAC5CqB,IAAAA,MAAM,EAAE,MADoC;AAE5CC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBR,MAAAA,MADiB;AAEjBC,MAAAA,KAFiB;AAGjBC,MAAAA,OAHiB;AAIjBC,MAAAA;AAJiB,KAAf;AAFsC,GAAhB,CAAhC;AASA,QAAMM,OAAO,GAAG,MAAML,QAAQ,CAACT,IAAT,EAAtB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYU,OAAZ;AACAhB,EAAAA,QAAQ,CAACiB,OAAO,CAACD,OAAD,CAAR,CAAR,CAdoD,CAepD;AACH,CAhBM,C,CAkBP;;AACA,MAAME,YAAY,GAAG,EAArB,C,CAEA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACzB,IAAf;AACI,SAAKJ,QAAL;AACI,YAAM8B,OAAO,GAAG,EAAhB;AACAD,MAAAA,MAAM,CAAC1B,IAAP,CAAY4B,OAAZ,CAAqBzB,GAAD,IAAS;AACzBwB,QAAAA,OAAO,CAACxB,GAAG,CAAC0B,EAAL,CAAP,GAAkB1B,GAAlB;AACH,OAFD;AAGA,aAAO,EACH,GAAGsB,KADA;AAEH,WAAGE;AAFA,OAAP;;AAIJ;AACI,aAAOF,KAAP;AAXR;AAaH,CAdD;;AAgBA,eAAeD,WAAf","sourcesContent":["import { csrfFetch } from \"./csrf\";\n\n// Define Action TYpes as Constants\nconst SET_BETS = \"bets/GET_ALL_BETS\";\nconst ADD_BET = \"bets/ADD_BET\"\n\n// Define Action Creators\nconst setBets = (bets) => ({\n    type: SET_BETS,\n    bets, // payload\n})\n\nconst addBet = (bet) => ({\n    type: ADD_BET,\n    bet,\n  });\n\n// Define Thunks\nexport const getAllBets = () => async (dispatch) => {\n    const res = await csrfFetch('/api/bets');\n    const bets = await res.json();\n    dispatch(setBets(bets));\n}\n\nexport const noteCreate = (note) => async (dispatch) => {\n    console.log(note)\n    const { userId, title, content, notebookId } = note; //notebookId\n    const response = await csrfFetch(\"/api/notes/\", {\n        method: \"POST\",\n        body: JSON.stringify({\n            userId,\n            title,\n            content,\n            notebookId\n        }),\n    });\n    const newNote = await response.json();\n    console.log(newNote)\n    dispatch(addNote(newNote));\n    // return response;\n};\n\n// Define an initial state\nconst initialState = {};\n\n//Define a Reducer\nconst betsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_BETS:\n            const allBets = {};\n            action.bets.forEach((bet) => {\n                allBets[bet.id] = bet;\n            })\n            return {\n                ...state,\n                ...allBets,\n            }\n        default:\n            return state;\n    }\n}\n\nexport default betsReducer;\n"]},"metadata":{},"sourceType":"module"}