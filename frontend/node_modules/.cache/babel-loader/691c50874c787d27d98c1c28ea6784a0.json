{"ast":null,"code":"import { csrfFetch } from \"./csrf\"; // Define Action TYpes as Constants\n\nconst SET_BETS = \"bets/GET_ALL_BETS\";\nconst ADD_BET = \"bets/ADD_BET\";\nconst DELETE_BET = \"bets/DELETE_BET\"; // Define Action Creators\n\nconst setBets = bets => ({\n  type: SET_BETS,\n  bets // payload\n\n});\n\nconst addBet = bet => ({\n  type: ADD_BET,\n  bet\n});\n\nconst deleteBet = betId => ({\n  type: DELETE_BET,\n  betId\n}); // Define Thunks\n\n\nexport const getAllBets = () => async dispatch => {\n  const res = await csrfFetch('/api/bets');\n  const bets = await res.json();\n  dispatch(setBets(bets));\n};\nexport const betCreate = bet => async dispatch => {\n  console.log(\"BBBBBBBBBBBB\", bet); // const { userId, title, content, notebookId } = note; //notebookId\n\n  const res = await csrfFetch(\"/api/bets\", {\n    method: \"POST\",\n    body: JSON.stringify(bet)\n  });\n\n  if (res.ok) {\n    const bet = await res.json();\n    console.log(\"&&&&&&&&&&&&&&\", bet);\n    dispatch(addBet(bet));\n    return res;\n  } // const newNote = await response.json();\n  // console.log(newNote)\n  // dispatch(addNote(newNote));\n  // return response;\n\n}; // export const deleteBet = (id) => async (dispatch) => {\n//     await csrfFetch('/api/bets', {\n//       method: 'DELETE',\n//       headers: { 'Content-Type': 'application/json' },\n//       body: JSON.stringify({ id }),\n//     });\n//     dispatch(deleteNote(id));\n//   };\n// Define an initial state\n\nconst initialState = {}; //Define a Reducer\n\nconst betsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_BETS:\n      console.log;\n      const allBets = {};\n      action.bets.forEach(bet => {\n        allBets[bet.id] = bet;\n      });\n      return { ...state,\n        ...allBets\n      };\n\n    case ADD_BET:\n      {\n        return { ...state,\n          [action.bet.id]: action.bet\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default betsReducer;","map":{"version":3,"sources":["/Users/matthewmores/AppAcademy/Capstone/Sportify/frontend/src/store/bets.js"],"names":["csrfFetch","SET_BETS","ADD_BET","DELETE_BET","setBets","bets","type","addBet","bet","deleteBet","betId","getAllBets","dispatch","res","json","betCreate","console","log","method","body","JSON","stringify","ok","initialState","betsReducer","state","action","allBets","forEach","id"],"mappings":"AAAA,SAASA,SAAT,QAA0B,QAA1B,C,CAEA;;AACA,MAAMC,QAAQ,GAAG,mBAAjB;AACA,MAAMC,OAAO,GAAG,cAAhB;AACA,MAAMC,UAAU,GAAG,iBAAnB,C,CAEA;;AACA,MAAMC,OAAO,GAAIC,IAAD,KAAW;AACvBC,EAAAA,IAAI,EAAEL,QADiB;AAEvBI,EAAAA,IAFuB,CAEjB;;AAFiB,CAAX,CAAhB;;AAKA,MAAME,MAAM,GAAIC,GAAD,KAAU;AACrBF,EAAAA,IAAI,EAAEJ,OADe;AAErBM,EAAAA;AAFqB,CAAV,CAAf;;AAKA,MAAMC,SAAS,GAAIC,KAAD,KAAY;AAC1BJ,EAAAA,IAAI,EAAEH,UADoB;AAE1BO,EAAAA;AAF0B,CAAZ,CAAlB,C,CAKA;;;AACA,OAAO,MAAMC,UAAU,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAChD,QAAMC,GAAG,GAAG,MAAMb,SAAS,CAAC,WAAD,CAA3B;AACA,QAAMK,IAAI,GAAG,MAAMQ,GAAG,CAACC,IAAJ,EAAnB;AACAF,EAAAA,QAAQ,CAACR,OAAO,CAACC,IAAD,CAAR,CAAR;AACH,CAJM;AAMP,OAAO,MAAMU,SAAS,GAAIP,GAAD,IAAS,MAAOI,QAAP,IAAoB;AAClDI,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BT,GAA5B,EADkD,CAElD;;AACA,QAAMK,GAAG,GAAG,MAAMb,SAAS,CAAC,WAAD,EAAc;AACrCkB,IAAAA,MAAM,EAAE,MAD6B;AAErCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeb,GAAf;AAF+B,GAAd,CAA3B;;AAIA,MAAIK,GAAG,CAACS,EAAR,EAAY;AACR,UAAMd,GAAG,GAAG,MAAMK,GAAG,CAACC,IAAJ,EAAlB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BT,GAA9B;AACAI,IAAAA,QAAQ,CAACL,MAAM,CAACC,GAAD,CAAP,CAAR;AACA,WAAOK,GAAP;AACH,GAZiD,CAalD;AACA;AACA;AACA;;AACH,CAjBM,C,CAmBP;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AACA,MAAMU,YAAY,GAAG,EAArB,C,CAEA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACpB,IAAf;AACI,SAAKL,QAAL;AACIe,MAAAA,OAAO,CAACC,GAAR;AACA,YAAMU,OAAO,GAAG,EAAhB;AACAD,MAAAA,MAAM,CAACrB,IAAP,CAAYuB,OAAZ,CAAqBpB,GAAD,IAAS;AACzBmB,QAAAA,OAAO,CAACnB,GAAG,CAACqB,EAAL,CAAP,GAAkBrB,GAAlB;AACH,OAFD;AAGA,aAAO,EACH,GAAGiB,KADA;AAEH,WAAGE;AAFA,OAAP;;AAIJ,SAAKzB,OAAL;AAAc;AACV,eAAO,EACH,GAAGuB,KADA;AAEH,WAACC,MAAM,CAAClB,GAAP,CAAWqB,EAAZ,GAAiBH,MAAM,CAAClB;AAFrB,SAAP;AAIC;;AACL;AACI,aAAOiB,KAAP;AAlBR;AAoBH,CArBD;;AAuBA,eAAeD,WAAf","sourcesContent":["import { csrfFetch } from \"./csrf\";\n\n// Define Action TYpes as Constants\nconst SET_BETS = \"bets/GET_ALL_BETS\";\nconst ADD_BET = \"bets/ADD_BET\"\nconst DELETE_BET = \"bets/DELETE_BET\"\n\n// Define Action Creators\nconst setBets = (bets) => ({\n    type: SET_BETS,\n    bets, // payload\n})\n\nconst addBet = (bet) => ({\n    type: ADD_BET,\n    bet,\n  });\n\nconst deleteBet = (betId) => ({\n    type: DELETE_BET,\n    betId,\n});\n\n// Define Thunks\nexport const getAllBets = () => async (dispatch) => {\n    const res = await csrfFetch('/api/bets');\n    const bets = await res.json();\n    dispatch(setBets(bets));\n}\n\nexport const betCreate = (bet) => async (dispatch) => {\n    console.log(\"BBBBBBBBBBBB\", bet)\n    // const { userId, title, content, notebookId } = note; //notebookId\n    const res = await csrfFetch(\"/api/bets\", {\n        method: \"POST\",\n        body: JSON.stringify(bet),\n    });\n    if (res.ok) {\n        const bet = await res.json();\n        console.log(\"&&&&&&&&&&&&&&\", bet)\n        dispatch(addBet(bet))\n        return res;\n    }\n    // const newNote = await response.json();\n    // console.log(newNote)\n    // dispatch(addNote(newNote));\n    // return response;\n};\n\n// export const deleteBet = (id) => async (dispatch) => {\n//     await csrfFetch('/api/bets', {\n//       method: 'DELETE',\n//       headers: { 'Content-Type': 'application/json' },\n//       body: JSON.stringify({ id }),\n//     });\n\n//     dispatch(deleteNote(id));\n//   };\n\n// Define an initial state\nconst initialState = {};\n\n//Define a Reducer\nconst betsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_BETS:\n            console.log\n            const allBets = {};\n            action.bets.forEach((bet) => {\n                allBets[bet.id] = bet;\n            })\n            return {\n                ...state,\n                ...allBets,\n            }\n        case ADD_BET: {\n            return {\n                ...state,\n                [action.bet.id]: action.bet,\n              };\n            }\n        default:\n            return state;\n    }\n}\n\nexport default betsReducer;\n"]},"metadata":{},"sourceType":"module"}